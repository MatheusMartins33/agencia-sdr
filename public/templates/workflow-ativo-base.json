{
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 8
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -2288,
        480
      ],
      "id": "879e518c-c149-45bb-a8a5-983b044cd37c",
      "name": "[1] SCHEDULE TRIGGER",
      "notes": "Tipo: Schedule Trigger\nNome: CRON-Disparo_Diario\n\nConfiguração:\n  Mode: Every Day\n  Hour: 10\n  Minute: 0\n  Timezone: America/Sao_Paulo\n\nOutput: trigger timestamp"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1rPAKD0bRobldKx5YQi4UHZ6L8cmIehMy6eIX8MnR7U8",
          "mode": "list",
          "cachedResultName": "PRODUTOS",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rPAKD0bRobldKx5YQi4UHZ6L8cmIehMy6eIX8MnR7U8/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Página1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1rPAKD0bRobldKx5YQi4UHZ6L8cmIehMy6eIX8MnR7U8/edit#gid=0"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -2000,
        320
      ],
      "id": "5d81859d-89d9-433f-893a-361e55c61b01",
      "name": "[2] GOOGLE SHEETS - Ler Produtos",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "Vj85WFSIkRpKMNlO",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1AYmJoT9sQxLV_5-leXfcQtnuj_E7UqZNbUbfThJzyyw",
          "mode": "list",
          "cachedResultName": "CONTATOS",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1AYmJoT9sQxLV_5-leXfcQtnuj_E7UqZNbUbfThJzyyw/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Página1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1AYmJoT9sQxLV_5-leXfcQtnuj_E7UqZNbUbfThJzyyw/edit#gid=0"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -2000,
        608
      ],
      "id": "9f3fbc1a-2078-4112-a151-b7d30cfbc032",
      "name": "[3] GOOGLE SHEETS - Ler Contatos",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "Vj85WFSIkRpKMNlO",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// ===== ETAPA 1: RECEBER E SEPARAR OS DADOS =====\n// $input.all() recebe os resultados de TODOS os nós que se conectam a este.\n// Neste caso, ele receberá uma lista de itens dos produtos e dos contatos.\nconst todosOsItens = $input.all();\n\n// Criamos arrays vazios para organizar os dados\nconst produtos = [];\nconst contatos = [];\n\n// Percorremos todos os itens recebidos para separá-los\nfor (const item of todosOsItens) {\n  // Se o item tem a propriedade 'id_produto', é um produto.\n  if (item.json.hasOwnProperty('id_produto')) {\n    produtos.push(item.json);\n  }\n  // Se o item tem a propriedade 'id_lead', é um contato.\n  if (item.json.hasOwnProperty('id_lead')) {\n    contatos.push(item.json);\n  }\n}\n\n// ===== ETAPA 2: APLICAR OS FILTROS QUE NÃO FORAM POSSÍVEIS NOS NÓS ANTERIORES =====\n\n// Filtro 1: Manter apenas produtos com quantidade maior que 0.\nconst produtosComEstoque = produtos.filter(p => {\n  const quantidade = parseInt(p.quantidade) || 0;\n  return quantidade > 0;\n});\n\n// Filtro 2: Manter apenas contatos que NÃO são 'convertido' ou 'opt_out'.\nconst contatosValidos = contatos.filter(c => {\n  const status = c.status || '';\n  return status !== 'convertido' && status !== 'opt_out';\n});\n\n\n// ===== ETAPA 3: VERIFICAÇÕES DE SEGURANÇA =====\n// Se após os filtros não sobrar nada, interrompemos o workflow com uma mensagem clara.\nif (produtosComEstoque.length === 0) {\n  throw new Error('❌ Nenhum produto com estoque disponível foi encontrado. Workflow interrompido.');\n}\nif (contatosValidos.length === 0) {\n  throw new Error('❌ Nenhum contato válido para prospecção foi encontrado. Workflow interrompido.');\n}\n\n\n// ===== ETAPA 4: COMBINAR LEADS E PRODUTOS =====\n// Agora, com as listas filtradas, criamos os pares.\nconst pares = [];\nfor (const contato of contatosValidos) {\n  // Para cada contato, selecionamos um produto aleatório da lista de produtos com estoque.\n  const produtoAleatorio = produtosComEstoque[Math.floor(Math.random() * produtosComEstoque.length)];\n  \n  pares.push({\n    // Dados do Contato\n    id_lead: contato.id_lead,\n    nome_lead: contato.nome,\n    telefone: contato.telefone,\n    empresa: contato.empresa,\n    segmento: contato.segmento,\n    score_atual: parseInt(contato.score) || 0,\n    \n    // Dados do Produto\n    id_produto: produtoAleatorio.id_produto,\n    nome_produto: produtoAleatorio.nome_produto,\n    descricao_produto: produtoAleatorio.descricao,\n    preco_normal: parseFloat(produtoAleatorio.preco_normal) || 0,\n    preco_promo: parseFloat(produtoAleatorio.preco_promo) || 0,\n    link_foto: produtoAleatorio.link_foto || ''\n  });\n}\n\n// ===== ETAPA 5: RETORNAR OS DADOS PARA O PRÓXIMO NÓ =====\n// O N8N espera que o retorno seja um array de objetos, cada um com uma chave 'json'.\nreturn pares.map(item => ({ json: item }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1504,
        480
      ],
      "id": "8bbcbf3e-3c71-4b1c-96c2-6f20110533f8",
      "name": "[4] FUNCTION - Combinar Leads e Produtos"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1280,
        480
      ],
      "id": "674ad58d-4444-440b-8016-d85b42e3c17e",
      "name": "[5] LOOP OVER ITEMS",
      "notes": "Tipo: Loop Over Items\nNome: LOOP-Processar_Pares-01\n\nConfiguração:\n  Batch Size: 1 (processa um de cada vez)"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {
          "maxTokens": 300,
          "temperature": 0.7
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1008,
        736
      ],
      "id": "717d24a4-39ac-4361-93bb-b2592ed91190",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "Vjv5A45TL3dg2g5u",
          "name": "treksin"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=AVALIE E CRIE A MENSAGEM DE ABORDAGEM:\n\n### DADOS DO LEAD:\n- Nome: {{ $json.nome_lead }}\n- Empresa: {{ $json.empresa }}\n- Segmento: {{ $json.segmento }}\n- Score atual: {{ $json.score_atual }}\n\n### DADOS DO PRODUTO:\n- Nome: {{ $json.nome_produto }}\n- Descrição: {{ $json.descricao_produto }}\n\n### CONTEXTO ESTRATÉGICO (O 'PORQUÊ'):\n- Dor/Necessidade Típica do Segmento: [**Preencha aqui a dor que o produto resolve para este segmento. Ex: \"Processamento lento de grandes volumes de dados e renderização de projetos 3D.\"**]\n- Benefício-Chave do Produto para essa Dor: [**Preencha aqui como o produto resolve essa dor. Ex: \"Com sua GPU dedicada e 32GB de RAM, reduz o tempo de renderização em até 40%, liberando a equipe para novos projetos.\"**]\n\nRESPONDA APENAS EM JSON VÁLIDO:\n{\n  \"score_fit\": 0-100,\n  \"justificativa\": \"breve explicação\",\n  \"mensagem\": \"texto da mensagem WhatsApp\"\n}",
        "options": {
          "systemMessage": "=```\nVocê é um Copywriter Sênior especializado em prospecção B2B. Seu superpoder é traduzir características de produtos em resultados de negócio tangíveis e criar mensagens curtas que geram respostas.\n\nSua missão é executar duas tarefas com precisão cirúrgica:\n\n### 1. Análise de FIT (Score e Justificativa)\nAnalise o `CONTEXTO ESTRATÉGICO` fornecido. O `score_fit` deve refletir o quão perfeitamente o `Benefício-Chave do Produto` resolve a `Dor/Necessidade Típica do Segmento`. Uma conexão direta e forte resulta em um score alto (85+). Sua `justificativa` deve ser a síntese dessa conexão em uma única frase.\n\n### 2. Criação da Mensagem de Abordagem (Sua Prioridade Máxima)\nA `mensagem` é sua obra-prima. Ela DEVE ser construída sobre a ponte entre a Dor e o Benefício.\n\n**REGRAS DE OURO PARA A MENSAGEM:**\n- **Zero Generalidade:** Você está PROIBIDO de usar termos vagos como \"melhorar a produtividade\", \"otimizar processos\" ou \"aumentar a eficiência\". Em vez disso, use o `Benefício-Chave` para falar de resultados específicos (Ex: \"reduzir o tempo de renderização\", \"liberar a equipe para novos projetos\").\n- **Estrutura [Observação + Solução]:** Comece mencionando o contexto do lead (segmento ou empresa) e imediatamente apresente o benefício-chave como a solução para a dor implícita.\n- **Tom de Especialista:** Dirija-se ao lead pelo `nome`. Seu tom é de quem entende profundamente o mundo do cliente e identificou algo de valor real.\n- **CTA de Diagnóstico:** Use um Call-to-Action que convide a um diagnóstico rápido, não a uma conversa longa. Exemplos: \"Isso ressoa com os desafios atuais da sua equipe?\", \"Essa é uma prioridade para vocês hoje?\".\n\n### FORMATO DE SAÍDA OBRIGATÓRIO\nSua resposta final DEVE ser um único objeto JSON válido, sem nenhum texto, comentário ou formatação markdown antes ou depois.\n```"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -1008,
        560
      ],
      "id": "fbbbfb14-0e19-4def-b68c-88597b023cf4",
      "name": "[6] AI Agent - Qualificador"
    },
    {
      "parameters": {
        "jsCode": "// A resposta do AI Agent vem em formato diferente\n// Precisamos adaptar baseado no output real\n\nlet resposta;\n\ntry {\n  // Tentar parsear se vier como string\n  if (typeof $json.output === 'string') {\n    resposta = JSON.parse($json.output);\n  } else if (typeof $json.text === 'string') {\n    resposta = JSON.parse($json.text);\n  } else if ($json.output && typeof $json.output === 'object') {\n    resposta = $json.output;\n  } else {\n    // Fallback: tentar pegar todo o json\n    resposta = $json;\n  }\n} catch (e) {\n  throw new Error('❌ Erro ao processar resposta da IA: ' + e.message + '\nResposta recebida: ' + JSON.stringify($json));\n}\n\n// Validar campos obrigatórios\nif (!resposta.score_fit || !resposta.mensagem) {\n  throw new Error('❌ IA não retornou os campos esperados. Resposta: ' + JSON.stringify(resposta));\n}\n\nreturn {\n  json: {\n    ...$json,  // ✅ Mantém dados do item atual\n    score_fit: parseInt(resposta.score_fit) || 0,\n    justificativa_ia: resposta.justificativa || '',\n    mensagem_gerada: resposta.mensagem,\n    timestamp_analise: new Date().toISOString()\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -640,
        560
      ],
      "id": "b6e8286a-90a8-40b5-935b-a88d363e1840",
      "name": "[7] Output Processing"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c6586bdb-817c-4c82-9111-a28de59d6320",
              "leftValue": "={{ $json.score_fit }}",
              "rightValue": 60,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -320,
        688
      ],
      "id": "d00a6bb2-e968-4cc5-a9cc-a1aebe4489f2",
      "name": "[8] IF - Filtrar Score Alto"
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        160,
        512
      ],
      "id": "33e019a1-71ac-4ab8-9573-dd6770b8c830",
      "name": "[9] DELAY",
      "webhookId": "e240b690-b636-404d-b885-655fabe995a5"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1AYmJoT9sQxLV_5-leXfcQtnuj_E7UqZNbUbfThJzyyw",
          "mode": "list",
          "cachedResultName": "CONTATOS",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1AYmJoT9sQxLV_5-leXfcQtnuj_E7UqZNbUbfThJzyyw/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Página1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1AYmJoT9sQxLV_5-leXfcQtnuj_E7UqZNbUbfThJzyyw/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "score": "={{ $('[7] Output Processing').item.json.score_fit }}",
            "status": "contatado",
            "ultima_interacao": "={{ $now.toISO() }}",
            "id_lead": "={{ $('[4] FUNCTION - Combinar Leads e Produtos').item.json.id_lead }}"
          },
          "matchingColumns": [
            "id_lead"
          ],
          "schema": [
            {
              "id": "id_lead",
              "displayName": "id_lead",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "nome",
              "displayName": "nome",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "telefone",
              "displayName": "telefone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "email",
              "displayName": "email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "empresa",
              "displayName": "empresa",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "segmento",
              "displayName": "segmento",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "score",
              "displayName": "score",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ultima_interacao",
              "displayName": "ultima_interacao",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        352,
        512
      ],
      "id": "7302e7de-69e1-4da5-b2dd-b000e22cdc12",
      "name": "[10] GOOGLE SHEETS - Atualizar Contato",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "Vj85WFSIkRpKMNlO",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1y33Skhcj0zYpPDrQrq5nVbUIJLhYV3JooCQmXFQuXvw",
          "mode": "list",
          "cachedResultName": "HISTORICO",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1y33Skhcj0zYpPDrQrq5nVbUIJLhYV3JooCQmXFQuXvw/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Página1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1y33Skhcj0zYpPDrQrq5nVbUIJLhYV3JooCQmXFQuXvw/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id_historico": "={{ $json.id_lead }}-{{ $now.toFormat('yyyyMMddHHmmss') }}",
            "id_lead": "={{ $json.id_lead }}",
            "timestamp": "={{ $now.toISO() }}",
            "tipo_agente": "ATIVO",
            "mensagem_enviada": "={{ $('[7] Output Processing').item.json.mensagem_gerada }}",
            "produto_relacionado": "={{ $('[4] FUNCTION - Combinar Leads e Produtos').item.json.id_produto }}",
            "acao_tomada": "DISPARO_INICIAL"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "id_historico",
              "displayName": "id_historico",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "id_lead",
              "displayName": "id_lead",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "timestamp",
              "displayName": "timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "tipo_agente",
              "displayName": "tipo_agente",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "mensagem_enviada",
              "displayName": "mensagem_enviada",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "resposta_cliente",
              "displayName": "resposta_cliente",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "produto_relacionado",
              "displayName": "produto_relacionado",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "acao_tomada",
              "displayName": "acao_tomada",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        608,
        704
      ],
      "id": "7a27453a-80b1-4347-8f90-25575016b9e5",
      "name": "[12] GOOGLE SHEETS - Registrar Histórico",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "Vj85WFSIkRpKMNlO",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// =================================================================\n// ETAPA 1: INICIALIZAÇÃO E TRATAMENTO DE ENTRADA\n// =================================================================\n\n// Recebe a lista de itens enviados com dados ricos.\nconst itensEnviados = $input.all();\n\n// Se o input estiver vazio, retorna um relatório zerado para manter a consistência do fluxo.\nif (itensEnviados.length === 0) {\n  return [{\n    json: {\n      total_analisados: 0, total_enviados: 0, total_rejeitados: 0, score_medio: 0,\n      detalhes_adicionais: {\n        performance_score: { minimo: 0, maximo: 0 },\n        performance_temporal: { duracao_segundos: 0 },\n        distribuicao: { por_produto: {}, por_segmento: {}, por_empresa: {} },\n        leads_contatados: []\n      },\n      timestamp: new Date().toISOString()\n    }\n  }];\n}\n\n// =================================================================\n// ETAPA 2: EXTRAÇÃO E AGREGAÇÃO DE DADOS\n// =================================================================\n\n// Inicializa as variáveis para as métricas do relatório.\nlet somaDosScores = 0;\nlet scoreMinimo = Infinity;\nlet scoreMaximo = -Infinity;\nconst distribuicaoProdutos = {};\nconst distribuicaoSegmentos = {};\nconst distribuicaoEmpresas = {};\nconst leadsContatados = [];\n\n// Loop principal para processar cada item enviado.\nfor (const item of itensEnviados) {\n  const { score, produto_relacionado, segmento, empresa, nome_lead } = item.json;\n\n  // 1. Agregações de Score\n  if (typeof score === 'number') {\n    somaDosScores += score;\n    if (score < scoreMinimo) scoreMinimo = score;\n    if (score > scoreMaximo) scoreMaximo = score;\n  }\n  \n  // 2. Agregações de Distribuição (Produto, Segmento, Empresa)\n  if (produto_relacionado) {\n    distribuicaoProdutos[produto_relacionado] = (distribuicaoProdutos[produto_relacionado] || 0) + 1;\n  }\n  if (segmento) {\n    distribuicaoSegmentos[segmento] = (distribuicaoSegmentos[segmento] || 0) + 1;\n  }\n  if (empresa) {\n    distribuicaoEmpresas[empresa] = (distribuicaoEmpresas[empresa] || 0) + 1;\n  }\n  \n  // 3. Lista de Leads Contatados para Auditoria\n  leadsContatados.push({\n    nome: nome_lead,\n    empresa: empresa,\n    score: score\n  });\n}\n\n// =================================================================\n// ETAPA 3: CÁLCULOS FINAIS E MONTAGEM DO RELATÓRIO\n// =================================================================\n\nconst totalEnviados = itensEnviados.length;\nconst scoreMedio = totalEnviados > 0 ? somaDosScores / totalEnviados : 0;\n\n// Calcula a duração total da operação a partir dos timestamps.\nconst timestamps = itensEnviados.map(item => new Date(item.json.timestamp));\nconst primeiroTimestamp = new Date(Math.min.apply(null, timestamps));\nconst ultimoTimestamp = new Date(Math.max.apply(null, timestamps));\nconst duracaoSegundos = (ultimoTimestamp - primeiroTimestamp) / 1000;\n\n// Estrutura o JSON de saída de forma organizada e rica.\nconst relatorioFinal = {\n  // Nível 1: Dados principais para a mensagem rápida\n  total_analisados: totalEnviados,\n  total_enviados: totalEnviados,\n  total_rejeitados: 0,\n  score_medio: parseFloat(scoreMedio.toFixed(1)),\n  timestamp: new Date().toISOString(),\n\n  // Nível 2: Detalhes aprofundados para análise\n  detalhes_adicionais: {\n    performance_score: {\n      minimo: scoreMinimo,\n      maximo: scoreMaximo\n    },\n    performance_temporal: {\n      duracao_segundos: duracaoSegundos,\n      primeiro_disparo_em: primeiroTimestamp.toISOString(),\n      ultimo_disparo_em: ultimoTimestamp.toISOString()\n    },\n    distribuicao_disparos: {\n      por_produto: distribuicaoProdutos,\n      por_segmento: distribuicaoSegmentos,\n      por_empresa: distribuicaoEmpresas\n    },\n    leads_contatados: leadsContatados\n  }\n};\n\nreturn [{\n  json: relatorioFinal\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -944,
        352
      ],
      "id": "28f9c5b4-1817-41c8-8366-8fc8d6907bb8",
      "name": "[13] FUNCTION - Relatório de Execução"
    },
    {
      "parameters": {
        "chatId": "1475462734",
        "text": "=🚀 *RELATÓRIO DE DISPARO ATIVO* 🚀\n\n📊 *RESUMO GERAL*\n✅ *Leads Contatados:* {{ $json.total_enviados }}\n⏱️ *Duração da Operação:* {{ $json.detalhes_adicionais.performance_temporal.duracao_segundos.toFixed(1) }} segundos\n\n📈 *PERFORMANCE DE SCORE*\n• *Score Médio:* {{ $json.score_medio }}\n• *Qualidade (Mín-Máx):* {{ $json.detalhes_adicionais.performance_score.minimo }} - {{ $json.detalhes_adicionais.performance_score.maximo }}\n\n🎯 *FOCO DA CAMPANHA*\n• *Segmento(s):* {{ Object.entries($json.detalhes_adicionais.distribuicao_disparos.por_segmento).map(([key, value]) => `${key} (${value})`).join(', ') }}\n• *Produto(s):* {{ Object.entries($json.detalhes_adicionais.distribuicao_disparos.por_produto).map(([key, value]) => `${key} (${value})`).join(', ') }}\n\n⏰ *Concluído em:* {{ new Date($json.timestamp).toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }) }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -640,
        352
      ],
      "id": "b78c5121-e5c6-44a4-af06-063b155592f1",
      "name": "[14] TELEGRAM / EMAIL - Notificação",
      "webhookId": "774c744a-aee6-4f54-a470-bfac5f13f892",
      "credentials": {
        "telegramApi": {
          "id": "yzkRg9pNkCvnYRi6",
          "name": "Carla AI"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -1728,
        480
      ],
      "id": "4b2a8ede-bac6-40dd-85f3-a71ed07b9530",
      "name": "Merge"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://34.56.205.234:8080/message/sendText/agente_cadastro_treksin",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "8B77E99EE20D-494B-BF89-316FBE53D29C"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"number\": \"{{ $('[4] FUNCTION - Combinar Leads e Produtos').item.json.telefone }}@s.whatsapp.net\",\n  \"text\": \"{{ $json.mensagem_gerada }}\"\n}",
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "id": "85b124db-9431-4d70-83e0-c0d347379f81",
      "name": "9) Send Text",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -16,
        512
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "81c37821-6666-4897-afe1-d9b6749a3b98",
              "name": "score",
              "value": "={{ $('[10] GOOGLE SHEETS - Atualizar Contato').item.json.score }}",
              "type": "number"
            },
            {
              "id": "e0b805c3-c3fa-4d88-9a42-0ea96b0ca7f3",
              "name": "id_lead",
              "value": "={{ $('[10] GOOGLE SHEETS - Atualizar Contato').item.json.id_lead }}",
              "type": "string"
            },
            {
              "id": "d7f4425c-3e21-46a6-a742-5fe4b55ad060",
              "name": "nome_lead",
              "value": "={{ $('[4] FUNCTION - Combinar Leads e Produtos').item.json.nome_lead }}",
              "type": "string"
            },
            {
              "id": "b1ca003d-2bcc-40ae-a731-012cbe1be97b",
              "name": "telefone",
              "value": "={{ $('[4] FUNCTION - Combinar Leads e Produtos').item.json.telefone }}",
              "type": "number"
            },
            {
              "id": "c6e1d2c4-1045-4a2d-ab07-8779ed84a67a",
              "name": "empresa",
              "value": "={{ $('[4] FUNCTION - Combinar Leads e Produtos').item.json.empresa }}",
              "type": "string"
            },
            {
              "id": "5948dadc-d234-4e76-8ec5-d13d7647a4fe",
              "name": "segmento",
              "value": "={{ $('[4] FUNCTION - Combinar Leads e Produtos').item.json.segmento }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        800,
        704
      ],
      "id": "2b4aba1b-69b7-43eb-b5ca-8a2f1048edb6",
      "name": "Edit Fields"
    }
  ],
  "connections": {
    "[1] SCHEDULE TRIGGER": {
      "main": [
        [
          {
            "node": "[2] GOOGLE SHEETS - Ler Produtos",
            "type": "main",
            "index": 0
          },
          {
            "node": "[3] GOOGLE SHEETS - Ler Contatos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[2] GOOGLE SHEETS - Ler Produtos": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[3] GOOGLE SHEETS - Ler Contatos": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "[4] FUNCTION - Combinar Leads e Produtos": {
      "main": [
        [
          {
            "node": "[5] LOOP OVER ITEMS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[5] LOOP OVER ITEMS": {
      "main": [
        [
          {
            "node": "[13] FUNCTION - Relatório de Execução",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "[6] AI Agent - Qualificador",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "[6] AI Agent - Qualificador",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "[6] AI Agent - Qualificador": {
      "main": [
        [
          {
            "node": "[7] Output Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[7] Output Processing": {
      "main": [
        [
          {
            "node": "[8] IF - Filtrar Score Alto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[8] IF - Filtrar Score Alto": {
      "main": [
        [
          {
            "node": "9) Send Text",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "[5] LOOP OVER ITEMS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[9] DELAY": {
      "main": [
        [
          {
            "node": "[10] GOOGLE SHEETS - Atualizar Contato",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[10] GOOGLE SHEETS - Atualizar Contato": {
      "main": [
        [
          {
            "node": "[12] GOOGLE SHEETS - Registrar Histórico",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[12] GOOGLE SHEETS - Registrar Histórico": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[13] FUNCTION - Relatório de Execução": {
      "main": [
        [
          {
            "node": "[14] TELEGRAM / EMAIL - Notificação",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "[4] FUNCTION - Combinar Leads e Produtos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "9) Send Text": {
      "main": [
        [
          {
            "node": "[9] DELAY",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "[5] LOOP OVER ITEMS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "8160192e3299436acb045fdff5ba54a749f4803db69e17b7cca4bba1c4a4cff7"
  }
}